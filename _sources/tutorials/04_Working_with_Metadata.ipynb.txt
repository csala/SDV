{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with Metadata\n",
    "\n",
    "In order to work with complex dataset structures you will need to pass additional information\n",
    "about you data to SDV.\n",
    "\n",
    "This is done by using a Metadata.\n",
    "\n",
    "Let's have a quick look at how to do it.\n",
    "\n",
    "## Load demo data\n",
    "\n",
    "We will load the demo dataset included in SDV for the rest of the session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sdv import load_demo\n",
    "\n",
    "metadata, tables = load_demo(metadata=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A part from the tables dict, this is returning a Metadata object that contains all the information\n",
    "about our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Metadata\n",
       "  root_path: /home/xals/Projects/MIT/SDV/tutorials\n",
       "  tables: ['users', 'sessions', 'transactions']\n",
       "  relationships:\n",
       "    sessions.user_id -> users.user_id\n",
       "    transactions.session_id -> sessions.session_id"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Metadata can also be represented by using a dict object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'tables': {'users': {'primary_key': 'user_id',\n",
       "   'fields': {'user_id': {'type': 'id', 'subtype': 'integer'},\n",
       "    'country': {'type': 'categorical'},\n",
       "    'gender': {'type': 'categorical'},\n",
       "    'age': {'type': 'numerical', 'subtype': 'integer'}}},\n",
       "  'sessions': {'primary_key': 'session_id',\n",
       "   'fields': {'session_id': {'type': 'id', 'subtype': 'integer'},\n",
       "    'user_id': {'ref': {'field': 'user_id', 'table': 'users'},\n",
       "     'type': 'id',\n",
       "     'subtype': 'integer'},\n",
       "    'device': {'type': 'categorical'},\n",
       "    'os': {'type': 'categorical'}}},\n",
       "  'transactions': {'primary_key': 'transaction_id',\n",
       "   'fields': {'transaction_id': {'type': 'id', 'subtype': 'integer'},\n",
       "    'session_id': {'ref': {'field': 'session_id', 'table': 'sessions'},\n",
       "     'type': 'id',\n",
       "     'subtype': 'integer'},\n",
       "    'timestamp': {'type': 'datetime', 'format': '%Y-%m-%d'},\n",
       "    'amount': {'type': 'numerical', 'subtype': 'float'},\n",
       "    'approved': {'type': 'boolean'}}}}}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata.to_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a Metadata object from scratch\n",
    "\n",
    "In this section we will have a look at how to create a Metadata object from scratch.\n",
    "\n",
    "The simplest way to do it is by populating it passing the tables of your dataset together\n",
    "with some additional information.\n",
    "\n",
    "Let's start by creating an empty metadata object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sdv import Metadata\n",
    "\n",
    "new_meta = Metadata()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can start by adding the parent table from our dataset, `users`,\n",
    "indicating that the primary key is the field called `user_id`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "users_data = tables['users']\n",
    "new_meta.add_table('users', data=users_data, primary_key='user_id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, let's add the sessions table, indicating that:\n",
    "- The primary key is the field `session_id`\n",
    "- The `users` table is parent to this table\n",
    "- The relationship between the `users` and `sessions` table is created by the field called `user_id`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sessions_data = tables['sessions']\n",
    "new_meta.add_table(\n",
    "    'sessions',\n",
    "    data=sessions_data,\n",
    "    primary_key='session_id',\n",
    "    parent='users',\n",
    "    foreign_key='user_id'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's add the transactions table.\n",
    "\n",
    "In this case, we will pass some additional information to indicate that\n",
    "the `timestamp` field should be actually parsed and interpreted as a\n",
    "datetime field."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "transactions_fields = {\n",
    "    'timestamp': {\n",
    "        'type': 'datetime',\n",
    "        'format': '%Y-%m-%d'\n",
    "    }\n",
    "}\n",
    "transactions_data = tables['transactions']\n",
    "new_meta.add_table(\n",
    "    'transactions',\n",
    "    transactions_data,\n",
    "    fields_metadata=transactions_fields,\n",
    "    primary_key='transaction_id',\n",
    "    parent='sessions'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see what our Metadata looks like right now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: Metadata Pages: 1 -->\n",
       "<svg width=\"371pt\" height=\"500pt\"\n",
       " viewBox=\"0.00 0.00 370.50 500.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 496)\">\n",
       "<title>Metadata</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-496 366.5,-496 366.5,4 -4,4\"/>\n",
       "<!-- users -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>users</title>\n",
       "<path fill=\"#ffec8b\" stroke=\"#000000\" d=\"M38,-377.5C38,-377.5 165,-377.5 165,-377.5 171,-377.5 177,-383.5 177,-389.5 177,-389.5 177,-479.5 177,-479.5 177,-485.5 171,-491.5 165,-491.5 165,-491.5 38,-491.5 38,-491.5 32,-491.5 26,-485.5 26,-479.5 26,-479.5 26,-389.5 26,-389.5 26,-383.5 32,-377.5 38,-377.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"101.5\" y=\"-476.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">users</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"26,-468.5 177,-468.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"34\" y=\"-453.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gender : categorical</text>\n",
       "<text text-anchor=\"start\" x=\"34\" y=\"-438.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">age : numerical &#45; integer</text>\n",
       "<text text-anchor=\"start\" x=\"34\" y=\"-423.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">user_id : id &#45; integer</text>\n",
       "<text text-anchor=\"start\" x=\"34\" y=\"-408.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">country : categorical</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"26,-400.5 177,-400.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"34\" y=\"-385.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Primary key: user_id</text>\n",
       "</g>\n",
       "<!-- sessions -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>sessions</title>\n",
       "<path fill=\"#ffec8b\" stroke=\"#000000\" d=\"M28.5,-196.5C28.5,-196.5 174.5,-196.5 174.5,-196.5 180.5,-196.5 186.5,-202.5 186.5,-208.5 186.5,-208.5 186.5,-313.5 186.5,-313.5 186.5,-319.5 180.5,-325.5 174.5,-325.5 174.5,-325.5 28.5,-325.5 28.5,-325.5 22.5,-325.5 16.5,-319.5 16.5,-313.5 16.5,-313.5 16.5,-208.5 16.5,-208.5 16.5,-202.5 22.5,-196.5 28.5,-196.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"101.5\" y=\"-310.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">sessions</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"16.5,-302.5 186.5,-302.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-287.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">os : categorical</text>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-272.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">device : categorical</text>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-257.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">user_id : id &#45; integer</text>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-242.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">session_id : id &#45; integer</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"16.5,-234.5 186.5,-234.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-219.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Primary key: session_id</text>\n",
       "<text text-anchor=\"start\" x=\"24.5\" y=\"-204.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Foreign key (users): user_id</text>\n",
       "</g>\n",
       "<!-- users&#45;&gt;sessions -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>users&#45;&gt;sessions</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M101.5,-377.2088C101.5,-363.9446 101.5,-349.6377 101.5,-335.7493\"/>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"105,-325.7312 101.5001,-335.7312 98,-325.7313 105,-325.7312\"/>\n",
       "<text text-anchor=\"middle\" x=\"197\" y=\"-347.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;sessions.user_id &#45;&gt; users.user_id</text>\n",
       "</g>\n",
       "<!-- transactions -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>transactions</title>\n",
       "<path fill=\"#ffec8b\" stroke=\"#000000\" d=\"M12,-.5C12,-.5 191,-.5 191,-.5 197,-.5 203,-6.5 203,-12.5 203,-12.5 203,-132.5 203,-132.5 203,-138.5 197,-144.5 191,-144.5 191,-144.5 12,-144.5 12,-144.5 6,-144.5 0,-138.5 0,-132.5 0,-132.5 0,-12.5 0,-12.5 0,-6.5 6,-.5 12,-.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"101.5\" y=\"-129.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">transactions</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"0,-121.5 203,-121.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-106.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">timestamp : datetime</text>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-91.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">amount : numerical &#45; float</text>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-76.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">session_id : id &#45; integer</text>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-61.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">approved : boolean</text>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-46.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">transaction_id : id &#45; integer</text>\n",
       "<polyline fill=\"none\" stroke=\"#000000\" points=\"0,-38.5 203,-38.5 \"/>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-23.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Primary key: transaction_id</text>\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-8.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Foreign key (sessions): session_id</text>\n",
       "</g>\n",
       "<!-- sessions&#45;&gt;transactions -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>sessions&#45;&gt;transactions</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M101.5,-196.3927C101.5,-183.0141 101.5,-168.7483 101.5,-154.8345\"/>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"105,-144.7831 101.5001,-154.7831 98,-144.7831 105,-144.7831\"/>\n",
       "<text text-anchor=\"middle\" x=\"232\" y=\"-166.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;transactions.session_id &#45;&gt; sessions.session_id</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x7f1b2b6cf630>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_meta.visualize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'tables': {'users': {'fields': {'gender': {'type': 'categorical'},\n",
       "    'age': {'type': 'numerical', 'subtype': 'integer'},\n",
       "    'user_id': {'type': 'id', 'subtype': 'integer'},\n",
       "    'country': {'type': 'categorical'}},\n",
       "   'primary_key': 'user_id'},\n",
       "  'sessions': {'fields': {'os': {'type': 'categorical'},\n",
       "    'device': {'type': 'categorical'},\n",
       "    'user_id': {'type': 'id',\n",
       "     'subtype': 'integer',\n",
       "     'ref': {'table': 'users', 'field': 'user_id'}},\n",
       "    'session_id': {'type': 'id', 'subtype': 'integer'}},\n",
       "   'primary_key': 'session_id'},\n",
       "  'transactions': {'fields': {'timestamp': {'type': 'datetime',\n",
       "     'format': '%Y-%m-%d'},\n",
       "    'amount': {'type': 'numerical', 'subtype': 'float'},\n",
       "    'session_id': {'type': 'id',\n",
       "     'subtype': 'integer',\n",
       "     'ref': {'table': 'sessions', 'field': 'session_id'}},\n",
       "    'approved': {'type': 'boolean'},\n",
       "    'transaction_id': {'type': 'id', 'subtype': 'integer'}},\n",
       "   'primary_key': 'transaction_id'}}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_meta.to_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pretty similar to the original metadata, right?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_meta.to_dict() == metadata.to_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving the Metadata as a JSON file\n",
    "\n",
    "The Metadata object can also be saved as a JSON file, which later on we can load:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_meta.to_json('demo_metadata.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "loaded = Metadata('demo_metadata.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loaded.to_dict() == new_meta.to_dict()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
